{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Abrakadabra\\\\kanban-copy\\\\src\\\\components\\\\KanbanBoard.jsx\",\n    _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nimport KanbanColumn from \"./KanbanColumn\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst KanbanBoard = _ref => {\n  _s();\n\n  let {\n    projects,\n    setProjects,\n    columns,\n    setColumns,\n    addTicket\n  } = _ref;\n  const [draggedOverColumn, setDraggedOverColumn] = useState(0); //this is called when a Kanban card is dragged over a column (called by column)\n\n  const handleOnDragEnter = (e, stageValue) => {\n    setDraggedOverColumn(stageValue);\n  }; //this is called when a Kanban card dropped over a column (called by card)\n\n\n  const handleOnDragEnd = (e, project) => {\n    e.preventDefault();\n    const updatedProjects = projects.slice(0);\n    updatedProjects.find(projectObject => {\n      return projectObject.id === project.id;\n    }).project_stage = draggedOverColumn;\n    setProjects(updatedProjects);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    \"data-testid\": \"kanban-board\",\n    style: {\n      display: \"flex\",\n      flexWrap: \"nowrap\"\n    },\n    children: columns.map(column => {\n      return /*#__PURE__*/_jsxDEV(KanbanColumn, {\n        name: column.name,\n        setProjects: setProjects,\n        stage: column.stage,\n        setColumns: setColumns,\n        projects: projects.filter(project => {\n          return project.project_stage === column.stage;\n        }),\n        onDragEnter: handleOnDragEnter,\n        onDragEnd: handleOnDragEnd,\n        addTicket: addTicket\n      }, column.stage, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 13\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 7\n  }, this);\n};\n\n_s(KanbanBoard, \"lRv4AJyGd8EK1stgM7o5PUUKoSw=\");\n\n_c = KanbanBoard;\nexport default KanbanBoard;\n\nvar _c;\n\n$RefreshReg$(_c, \"KanbanBoard\");","map":{"version":3,"names":["useState","KanbanColumn","KanbanBoard","projects","setProjects","columns","setColumns","addTicket","draggedOverColumn","setDraggedOverColumn","handleOnDragEnter","e","stageValue","handleOnDragEnd","project","preventDefault","updatedProjects","slice","find","projectObject","id","project_stage","display","flexWrap","map","column","name","stage","filter"],"sources":["C:/Users/Abrakadabra/kanban-copy/src/components/KanbanBoard.jsx"],"sourcesContent":["import {useState} from \"react\";\r\nimport KanbanColumn from \"./KanbanColumn\";\r\nconst KanbanBoard = ({\r\n    projects,\r\n    setProjects,\r\n    columns,\r\n    setColumns,\r\n    addTicket,\r\n  }) => {\r\n    const [draggedOverColumn, setDraggedOverColumn] = useState(0);\r\n    //this is called when a Kanban card is dragged over a column (called by column)\r\n    const handleOnDragEnter = (e, stageValue) => {\r\n      setDraggedOverColumn(stageValue);\r\n    };\r\n  \r\n    //this is called when a Kanban card dropped over a column (called by card)\r\n    const handleOnDragEnd = (e, project) => {\r\n      e.preventDefault();\r\n      const updatedProjects = projects.slice(0);\r\n      updatedProjects.find((projectObject) => {\r\n        return projectObject.id === project.id;\r\n      }).project_stage = draggedOverColumn;\r\n      setProjects(updatedProjects);\r\n    };\r\n    return (\r\n      <div data-testid=\"kanban-board\" style={{ display: \"flex\", flexWrap: \"nowrap\" }}>\r\n        {columns.map((column) => {\r\n          return (\r\n            <KanbanColumn\r\n              name={column.name}\r\n              setProjects={setProjects}\r\n              stage={column.stage}\r\n              setColumns={setColumns}\r\n              projects={projects.filter((project) => {\r\n                return project.project_stage === column.stage;\r\n              })}\r\n              onDragEnter={handleOnDragEnter}\r\n              onDragEnd={handleOnDragEnd}\r\n              key={column.stage}\r\n              addTicket={addTicket}\r\n            />\r\n          );\r\n        })}\r\n      </div>\r\n    );\r\n  };\r\n\r\n  export default KanbanBoard;"],"mappings":";;;AAAA,SAAQA,QAAR,QAAuB,OAAvB;AACA,OAAOC,YAAP,MAAyB,gBAAzB;;;AACA,MAAMC,WAAW,GAAG,QAMZ;EAAA;;EAAA,IANa;IACjBC,QADiB;IAEjBC,WAFiB;IAGjBC,OAHiB;IAIjBC,UAJiB;IAKjBC;EALiB,CAMb;EACJ,MAAM,CAACC,iBAAD,EAAoBC,oBAApB,IAA4CT,QAAQ,CAAC,CAAD,CAA1D,CADI,CAEJ;;EACA,MAAMU,iBAAiB,GAAG,CAACC,CAAD,EAAIC,UAAJ,KAAmB;IAC3CH,oBAAoB,CAACG,UAAD,CAApB;EACD,CAFD,CAHI,CAOJ;;;EACA,MAAMC,eAAe,GAAG,CAACF,CAAD,EAAIG,OAAJ,KAAgB;IACtCH,CAAC,CAACI,cAAF;IACA,MAAMC,eAAe,GAAGb,QAAQ,CAACc,KAAT,CAAe,CAAf,CAAxB;IACAD,eAAe,CAACE,IAAhB,CAAsBC,aAAD,IAAmB;MACtC,OAAOA,aAAa,CAACC,EAAd,KAAqBN,OAAO,CAACM,EAApC;IACD,CAFD,EAEGC,aAFH,GAEmBb,iBAFnB;IAGAJ,WAAW,CAACY,eAAD,CAAX;EACD,CAPD;;EAQA,oBACE;IAAK,eAAY,cAAjB;IAAgC,KAAK,EAAE;MAAEM,OAAO,EAAE,MAAX;MAAmBC,QAAQ,EAAE;IAA7B,CAAvC;IAAA,UACGlB,OAAO,CAACmB,GAAR,CAAaC,MAAD,IAAY;MACvB,oBACE,QAAC,YAAD;QACE,IAAI,EAAEA,MAAM,CAACC,IADf;QAEE,WAAW,EAAEtB,WAFf;QAGE,KAAK,EAAEqB,MAAM,CAACE,KAHhB;QAIE,UAAU,EAAErB,UAJd;QAKE,QAAQ,EAAEH,QAAQ,CAACyB,MAAT,CAAiBd,OAAD,IAAa;UACrC,OAAOA,OAAO,CAACO,aAAR,KAA0BI,MAAM,CAACE,KAAxC;QACD,CAFS,CALZ;QAQE,WAAW,EAAEjB,iBARf;QASE,SAAS,EAAEG,eATb;QAWE,SAAS,EAAEN;MAXb,GAUOkB,MAAM,CAACE,KAVd;QAAA;QAAA;QAAA;MAAA,QADF;IAeD,CAhBA;EADH;IAAA;IAAA;IAAA;EAAA,QADF;AAqBD,CA3CH;;GAAMzB,W;;KAAAA,W;AA6CJ,eAAeA,WAAf"},"metadata":{},"sourceType":"module"}